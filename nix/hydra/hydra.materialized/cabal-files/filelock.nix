{ system
  , compiler
  , flags
  , pkgs
  , hsPkgs
  , pkgconfPkgs
  , errorHandler
  , config
  , ... }:
  ({
    flags = {};
    package = {
      specVersion = "1.10";
      identifier = { name = "filelock"; version = "0.1.1.5"; };
      license = "LicenseRef-PublicDomain";
      copyright = "";
      maintainer = "tak@anoak.io";
      author = "Takano Akio";
      homepage = "http://github.com/takano-akio/filelock";
      url = "";
      synopsis = "Portable interface to file locking (flock / LockFileEx)";
      description = "This package provides an interface to Windows and Unix\nfile locking functionalities.";
      buildType = "Simple";
      };
    components = {
      "library" = {
        depends = [
          (hsPkgs."base" or (errorHandler.buildDepError "base"))
          ] ++ (if system.isWindows
          then [ (hsPkgs."Win32" or (errorHandler.buildDepError "Win32")) ]
          else [ (hsPkgs."unix" or (errorHandler.buildDepError "unix")) ]);
        buildable = true;
        };
      tests = {
        "test" = {
          depends = [
            (hsPkgs."filelock" or (errorHandler.buildDepError "filelock"))
            (hsPkgs."process" or (errorHandler.buildDepError "process"))
            (hsPkgs."async" or (errorHandler.buildDepError "async"))
            (hsPkgs."base" or (errorHandler.buildDepError "base"))
            ];
          buildable = true;
          };
        "interrupt" = {
          depends = [
            (hsPkgs."filelock" or (errorHandler.buildDepError "filelock"))
            (hsPkgs."process" or (errorHandler.buildDepError "process"))
            (hsPkgs."async" or (errorHandler.buildDepError "async"))
            (hsPkgs."base" or (errorHandler.buildDepError "base"))
            ];
          buildable = if system.isWindows then false else true;
          };
        };
      };
    } // {
    src = (pkgs.lib).mkDefault (pkgs.fetchurl {
      url = "http://hackage.haskell.org/package/filelock-0.1.1.5.tar.gz";
      sha256 = "50ebea81e8443356af26f32221d4594709d94102445931673fcd94a44e244419";
      });
    }) // {
    package-description-override = "-- Initial filelock.cabal generated by cabal init.  For further \n-- documentation, see http://haskell.org/cabal/users-guide/\n\nname:                filelock\nversion:             0.1.1.5\nsynopsis:            Portable interface to file locking (flock / LockFileEx)\ndescription:         This package provides an interface to Windows and Unix\n                     file locking functionalities.\nhomepage:            http://github.com/takano-akio/filelock\nlicense:             PublicDomain\nlicense-file:        LICENSE\nauthor:              Takano Akio\nmaintainer:          tak@anoak.io\n-- copyright:           \ncategory:            System\nbuild-type:          Simple\n-- extra-source-files:  \ncabal-version:       >=1.10\nextra-source-files:  tests/lock.log.expected\ntested-with:         GHC ==8.4.2 || ==8.6.5 || ==8.8.3\n\nlibrary\n  exposed-modules:     System.FileLock\n  other-modules:       System.FileLock.Internal.Flock\n                       System.FileLock.Internal.LockFileEx\n  -- other-extensions:    \n  build-depends:       base >=4.9.0.0 && <5\n  -- hs-source-dirs:      \n  default-language:    Haskell2010\n\n  ghc-options:        -Wall\n  if os(windows)\n    cpp-options:      -DUSE_LOCKFILEEX\n    build-depends:    Win32\n  else\n    cpp-options:      -DUSE_FLOCK\n    build-depends:    unix\n\ntest-suite test\n  type:               exitcode-stdio-1.0\n  hs-source-dirs:     tests\n  main-is:            test.hs\n  build-depends:      filelock, process >= 1.2.1.0, async, base\n  ghc-options:        -threaded\n  default-language:   Haskell2010\n\ntest-suite interrupt\n  type:               exitcode-stdio-1.0\n  hs-source-dirs:     tests\n  main-is:            interrupt.hs\n  build-depends:      filelock, process >= 1.2.1.0, async, base\n  ghc-options:        -threaded\n  default-language:   Haskell2010\n  if os(windows)\n    buildable:        False\n\nsource-repository head\n  type: git\n  location: https://github.com/takano-akio/filelock.git\n";
    }